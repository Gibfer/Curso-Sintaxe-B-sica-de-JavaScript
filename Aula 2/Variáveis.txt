Aula 2: Objetivos
    1. Como funciona a tipagem em JS?;
    2. O que são variáveis e como declarar;
    3. Diferenças entre atribuição. comparação e idêntica;
    4. Operadores aritméticos, relacionais e lógicos;

1. Como funciona a tipagem em JS?
    A tipagem funciona como uma regra de uso de dados, quanto mais forte for a tipagem, mais obrigatório é a declaração do tipo de dado. A tipagem em JavaScript é fraca, a declaração dos dados acontece de modo dinâmico.
    Ex.: Ao criarmos uma variável com valor entre aspas (“valor”) o JavaScript já converte o dado para o tipo String.
    Ex.: var numero = 1;
    // o JavaScript já converte o valor 1 para o tipo Number.

2. Como declarar variáveis e seus tipos
    Tipos Primitivos
        As variáveis em JavaScript podem guardar tipos de dados que chamamos de tipos primitivos
        Variáveis podem guardar valores dos tipos:
        - Boolean; (booleanos, verdadeiros ou falsos)
        - null; (nulo)
        - undefined; (indefinido)
        - Number; (número)
        - String; (cadeias de caracteres)
        - Array; (coleção )
        - Object;
        - Function.

    Variáveis:
        São dados que variam. Ora, ora Diana eu nem pensei nisso.
        Imagina uma caixa, tu pode colocar quase qualquer coisa dentro dela, pode ser uma lista de nomes, cartões com números, objetos no geral...
        Variáveis funcionam como uma caixa que guarda valores.

    Declaração de Variáveis:
        Existem 3 modos de declarar as variáveis em JavaScript:
        - var = escopo global e local, pode ter seu valor alterado, se não tiver um valor inicial será tratada como null.
        - let = escopo local de bloco, pode ter seu valor alterado, se não tiver uma valor inicial será tratada como null;
        - const = escopo local de bloco, somente leitura, o valor inicial é obrigatório e não poe ser alterado.

    Escopo
        O escopo em JavaScript define a limitação e visibilidade de um bloco de código.

        Escopo global – quando a variável é declarada fora de qualquer bloco, sua visibilidade fica disponível em todo o código.

        Escopo local – quando a variável é declarada dentro de um bloco, sua visibilidade pode ficar disponível ou não.
    
    Regras de uso de Variáveis:

        - Iniciar com letras, underscore_ ou cifrão $; Não iniciar com número.
        Ex: var 1nome (errado)
            var nome || var _nome (certo)

        - Não usar espaços (use o camelCase ou _)
        Ex: var nome completo (errado)
            var nomeCompleto || var nome_completo (certo)

        - Não usar palavras reservadas.
        Ex: var function (errado)

        - Declarar variáveis no topo do código
    
    Diferenças entre atribuição, comparação e idêntica.
        
        - Atribuição: O sinal de igualdade “=“ em JavaScript, significa atribuição.
            Ex.: como declarar: var nome = “meu nome”;
                como ler: variável nome recebe o valor meunome;
        
        - Comparação: Para fazermos uma comparação de valores em JavaScript usamos “==“.
            Ex.: como declarar: "0" == 0; ;
                como ler: “0” tem o valor igual a 0?
                // nesse caso retorna true (verdadeiro)
        
        - Comparação Idêntica: Para fazermos uma comparação de valores e tipos em JavaScript usamos “===“.
            Ex.: como declarar: "0" === 0; ;
            como ler: “0” tem o valor e o tipo idêntico a 0?
                // nesse caso retorna false (falso)

    Operadores Aritméticos:
        São tipos de operadores matemáticos com valor numérico:
            + adição
            - subtração
            * multiplicação
            / divisão real
            % divisão inteira
            ** potenciação
    
    Operadores Relacionais:
        São tipos de operadores que consultam a relação entre valores:
            > maior que
            < menor que
            >= maior ou igual a 
            <= menor ou igual a 

    Operadores Lógicos:
        São tipos de operadores que consultam valores lógicos:
            && - "e" considera que todos os valores sejam true
            || - "ou" considera que qualquer valor seja true
            ! - "não" inverte o valor de trye para false ou vice-versa 
            

